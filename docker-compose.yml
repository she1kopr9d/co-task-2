services:
  frontend-service:
    build:
      context: .
      dockerfile: ./frontend_service/Dockerfile
    volumes:
      - ./frontend_service:/app
      - static:/app/static
      - ./shared:/app/shared
    ports:
      - "8000:8000"
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - postgres
      - redis
    restart: always
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    networks:
      - co_network

  auth-service:
    build:
      context: .
      dockerfile: ./auth_service/Dockerfile
    volumes:
      - ./auth_service:/app
      - ./shared:/app/shared
      - static:/app/static
    ports:
      - "8001:8001"
    command: python manage.py runserver 0.0.0.0:8001
    depends_on:
      - postgres
      - redis
    restart: always
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    networks:
      - co_network
  
  media-service:
    build:
      context: .
      dockerfile: ./media_service/Dockerfile
    command: python manage.py runserver 0.0.0.0:8002
    ports:
      - "8002:8002"
    volumes:
      - ./media_service:/app
      - ./media_service/media_cache:/app/media_cache
      - ./shared:/app/shared
      - static:/app/static
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    depends_on:
      - redis
    restart: always
    networks:
      - co_network
  
  social-service:
    build:
      context: .
      dockerfile: ./social_service/Dockerfile
    command: python manage.py runserver 0.0.0.0:8003
    ports:
      - "8003:8003"
    volumes:
      - ./social_service:/app
      - ./shared:/app/shared
      - static:/app/static
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    depends_on:
      - redis
    restart: always
    networks:
      - co_network
  
  social-celery:
    build:
      context: .
      dockerfile: ./social_service/Dockerfile
    command: celery -A social_service worker --loglevel=info
    volumes:
      - ./social_service:/app
      - ./shared:/app/shared
    depends_on:
      - redis
    environment:
      - PYTHONPATH=/app:/app/shared
    env_file:
      - .env
    networks:
      - co_network

  nginx:
    image: nginx:latest
    container_name: co_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static:/app/static
    depends_on:
      - frontend-service
      - auth-service
      - social-service
      - media-service
      - kafka-ui
    restart: always
    networks:
      - co_network
  
  static:
    image: nginx:alpine
    container_name: static_server
    ports:
      - "8080:80"
    volumes:
      - static:/usr/share/nginx/html:ro
    networks:
      - co_network

  postgres:
    image: postgres:14
    container_name: co_postgres
    restart: always
    environment:
      POSTGRES_DB: co_task_db
      POSTGRES_USER: co_user
      POSTGRES_PASSWORD: co_pass
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - co_network

  redis:
    image: redis:alpine
    container_name: co_redis
    restart: always
    command: ["redis-server", "--notify-keyspace-events", "Ex"]
    ports:
      - "6379:6379"
    networks:
      - co_network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - co_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - co_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      - LOG_LEVEL=ERROR
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - AUTH_TYPE=LOGIN_FORM
      - SPRING_SECURITY_USER_NAME=shelldev
      - SPRING_SECURITY_USER_PASSWORD=qwerty.1
    depends_on:
      - kafka
    networks:
      - co_network

volumes:
  pg_data:
  static:

networks:
  co_network:
    name: co_network
